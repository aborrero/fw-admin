#!/bin/bash

### BEGIN INIT INFO
# Provides:          fw
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: iptables-based firewall
# Description:       this init.d script starts/stops de system firewall
### END INIT INFO

#
# Author: Arturo Borrero <aborrero@cica.es>
# This file is released under the GPLv3 license.
#
# Can obtain a complete copy of the license at: http://www.gnu.org/licenses/gpl-3.0.html
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Script return values:
#
# In case of success (at start, stop):	0
# In case of failure (at start, stop):	1
# In case of script misscontrol:	2
# In case of status -> stopped:		3
# In case of status -> started:		0
# In case of bad arguments: 		4


# Required files (default path)
#
# Main bin:			/usr/sbin/fw-admin
# Logger:			/usr/bin/logger
# Conf file:			$CONF_FILE (source /etc/default/fw)

[ -e /etc/default/fw ] && . /etc/default/fw

# Variables
#

PID=$$
MAIN_BIN="$( which fw-admin)"
LOGGER_BIN="$( which logger)"
ARGS_LOGGER="-t fw[$PID] --"

# Setting defaults
#

# Check if enabled NOW
ENABLED=${ENABLED:-"no"}
if [ "$ENABLED" != "yes" ] ; then
	echo "W: Service disabled in /etc/default/fw" >&2
	exit 3
fi

START_TIMEOUT=${START_TIMEOUT:-"5"}

# Check main config file
CONF_FILE=${CONF_FILE:-"/etc/fw-admin.d/fw-admin.conf"}
if [ -e "$CONF_FILE" ] ; then
	if ! source $CONF_FILE ; then
		echo "W: Unable to source main fw-admin config file $CONF_FILE" >&2
	fi
else
	echo "W: Unable to read main fw-admin config file $CONF_FILE" >&2
fi

START_ORDER=${START_ORDER:-"core sets"}
STOP_ORDER=${STOP_ORDER:-"core"}


# Some functions
#

message()
{
	echo $1 >&2
	$LOGGER_BIN $ARGS_LOGGER $1
}

check_required_files()
{
	[ ! -x "$MAIN_BIN" ] && { echo "E: Binary not found: $MAIN_BIN" >&2 ; return 1 ; }
	[ ! -x "$LOGGER_BIN" ] && { echo "E: Binary not found: $LOGGER_BIN" >&2 ; return 1 ; }
	return 0
}

is_running()
{
	$MAIN_BIN -s | grep -i "\[fw up\]" > /dev/null 2> /dev/null
	if [ $? -ne 0 ]
	then
		return 3 # stopped
	else
		return 0 # running
	fi
}

kill_all()
{
	for i in $( ps aux | grep "$MAIN_BIN --start" | grep -v grep | awk -F' ' '{print $2}' )
	do
		[ ! -z "$i" ] && kill $i
	done
}

start()
{
	is_running
	if [ $? -ne 0 ] ; then
		# pre-start hook
		if [ ! -z "$PRE_START" ] ; then
			eval "$PRE_START 2>/dev/null >/dev/null" &
		fi

		$MAIN_BIN --start --nocheck >/dev/null 2>/dev/null &

		# waiting for start timeout
		local cont=0
		while [ $cont -lt $START_TIMEOUT ]
		do
			((cont++))
			if is_running
			then
				# post-start hook
				if [ ! -z "$POST_START" ] ; then
					eval "$POST_START 2>/dev/null >/dev/null" &
				fi

				return 0
			else
				sleep 1
			fi
		done
		message "E: Unable to start"
		return 1
	fi
	return 0
}

stop()
{
	# pre-stop hook
	if [ ! -z "$PRE_STOP" ] ; then
		eval "$PRE_STOP 2>/dev/null >/dev/null" &
	fi

	kill_all # kill previous attemps

	for i in $STOP_ORDER ; do
		$MAIN_BIN --stop $i >/dev/null 2>/dev/null
	done

	# post-stop hook
	if [ ! -z "$POST_STOP" ] ; then
		eval "$POST_STOP 2>/dev/null >/dev/null" &
	fi

	return 0
}

check_required_files || exit 2

case "$1" in

	start)
		is_running ; rc=$?
		if [ $rc -ne 0 ]
		then
			start ; rc=$?
		else
			message "I: Already started."
		fi
		exit $rc
		;;
	restart|force-reload)
		stop
		start
		exit $?
		;;
	stop)
		stop
		exit $?
		;;
	status)
		is_running ; rc=$?
		if [ $rc -eq 0 ]
		then
			message "I: Firewall running."
		else
			message "I: Firewall stopped."
		fi
		exit $rc
		;;

	*)
		echo -e "${C_BOLD}Usage${C_NORMAL}: {start|stop|restart|force-reload|status}"
		exit 4
		;;
esac
exit 1
