.TH FW-ADMIN 8 "8 Jul 2013"
.SH NAME
fw-admin \- Tool for managing a dual stack (IPv4 and IPv6) Netfilter firewall
.SH SYNOPSIS
\fBfw-admin -s\fP

\fBfw-admin -a\fP [\fIipv4|ipv6|fqdn|var\fP]

\fBfw-admin -d\fP [\fIipv4|ipv6|fqdn|var\fP]

\fBfw-admin -r\fP

\fBfw-admin -i\fP [\fIipv4|ipv6|fqdn|var\fP]

\fBfw-admin -c\fP \fIfile\fP

\fBfw-admin --check-datafiles\fP [--install]

\fBfw-admin --help\fP

\fBfw-admin --start\fP [\fIfile\fP] [--nocheck]

\fBfw-admin --stop\fP [\fIchainname\fP]

	file = A file in $CONF_DIR or with absolute pathname.

	ipv4 ipv6 fqdn = An IPv4, IPv6 or a valid FQDN.

	var = A custom variable.

	chainname = A netfilter chain.

.SH DESCRIPTION
\fBfw-admin\fP is a tool for managing a dual stack (IPv4 and IPv6) Netfilter firewall.

Is a complex \fBBash(1)\fP script on top of \fBiptables(8)\fP, \fBip6tables(8)\fP and \fBipset(8)\fP.
.SH FUNCTIONALITIES
Some characteristics and functionalities of \fBfw-admin\fP:
.TP
· Abstracction of \fBip{tables|6tables}\fP using variables with values in IPv4 and IPv6.
This allows you to write one rule and be valid for IPv4 and IPv6 (dual stack).
.TP
· Checks for variables and syntax, avoiding most human errors.
.TP
· Transactional-like mechanisms. \fBfw-admin\fP will act when detect errors and/or inconsistencies at policy deploy.
.TP
· Integration with \fBipset(8)\fP for using Netfilter's data sets.
.TP
· Easy to integrate in HA environments, with \fPPacemaker(8)\fP as a standar LSB resource.
.TP
· Avoid thousand of DNS queries by locally caching DNS data (actually, the variables).
.TP
· Able to handle big rulesets. Thousand of rules, thousand of variables.
.SH OPTIONS
.TP 
\fB-s\fP
Show firewall stats

At the end of the stats, a message "\fB[fw up]\fP" or "\fB[fw down]\fP" will be shown.

You will see "\fB[fw up]\fP" if there are more than \fB$MINIMAL_AMOUNT_OF_RULES\fP in kernel (see \fBfw-admin.conf(5)\fP).

Note: This message is used by /etc/init.d/fw to know if the firewall is up.
.TP 
\fB-a [ipv4|ipv6|fqdn|var]\fP
Adds a variable to datafiles. 

If the variable already exist, update the value in datafiles (useful for updating a FQDN variable which his A or AAAA register changed).

The variable name you should use in your rulefiles will be printed.

You may set the \fB$DOMAIN\fP directive in \fBfw-admin.conf(5)\fP to get all your own domain FQDNs variables shortened.

This options accepts multiple input arguments, like: `fw-admin -a ::1 192.168.0.1 www.example.com 2a00:9ac0::2`
.TP
\fB-d [ipv4|ipv6|fqdn|var]\fP
Delete a variable in datafiles.

This will not delete any rule containing the variable you deleted, so maybe you should check your ruleset before and after deleting
to avoid reference variables that does not exists.

This options accepts multiple input arguments, like: `fw-admin -d ::1 192.168.0.1 www.example.com 2a00:9ac0::2`
.TP
\fB-r\fP
Reload FQDN variables values against your DNS server. This is possible thanks to the trailing comment in datafiles.

Lines in datafiles that contains '##ignore##' are ignored. This useful to
declare variables like 'IF=eth0 ##ignore##' that does not need to be reloaded agains a DNS.
.TP
\fB-i [ipv4|ipv6|fqdn|var]\fP
Get information about the data.

Search datafiles and iptables for the input data.
.TP
\fB-c file\fP
Check the given file for undeclared variables and iptables syntax.
.TP
\fB--start [file] [--nocheck]\fP
Start a rulefile (AKA deploy policy).

If in \fBfw-admin.conf\fP is set \fBFORMAT=restore\fP:
.nf
	· Check variables in \fIfile\fP.
	· Expand IPv4 variable value and run \fBiptables-restore(8)\fP.
	· Ignore NAT rules for IPv6.
	· Expand IPv6 variable value and run \fBip6tables-restore(8)\fP.
.fi

If in \fBfw-admin.conf\fP is set \fBFORMAT=script\fP:
.nf
	· Check variables in \fIfile\fP.
	· Check iptables syntax (only if the name of \fIfile\fP is not `core')
	· Source v4 datafiles.
	· Iterate over \fIfile\fP evaluating each line (deploy IPv4 policy).
	· Source v6 datafiles.
	· Iterate over \fIfile\fP evaluating each line (deploy IPv6 policy).
.fi

Before deploying the policy, a permissive rule is added. If the deploy of the new policy doesn't fail, the permissive rule is deleted.

This rule is identified with a comment "transaccional_rule_fw-admin".

The option \fB--nocheck\fP avoids all checks. Use this if you want a fast deployment of the new policy.

If no \fBfile\fP argument is provided, \fBfw-admin\fP will start the files as configured in \fB$START_ORDER\fP (see \fBfw-admin.conf(5)\fP).
.TP
\fB--stop [chainname]\fP

If \fBFORMAT=restore\fP is set, \fB--stop\fP will just flush the firewall. If \fB$PERMISSIVE_TRAFFIC_WHEN_STOP="yes"\fP, permissive rules with the comment
"transaccional_rule_fw-admin" will be added to the kernel.

If \fBFORMAT=script\fP is set and you call \fB--stop\fP without additional arguments, the behaviour is equal to \fBFORMAT=restore\fP.

If \fBFORMAT=script\fP and \fIchainname\fP is the name of a chain in the filter table, \fBfw-admin\fP will flush just that chain. If \fB$PERMISSIVE_TRAFFIC_WHEN_STOP=yes\fP
then a permissive rule with the comment "transaccional_rule_fw-admin" will be added in that chain.
.TP
\fB--check-datafiles [--install]\fP

Check datafiles for errors.

If called with \fB--install\fP argument then \fBfw-admin\fP will make a basic datafiles deploy (useful at first use/installation). 

.TP
\fB--help\fP
Show basic help.

.SH IMPORTANT FILES
.TP
\fB/etc/fw-admin.d/fw-admin.conf\fR 
Main config file. See \fBfw-admin.conf(5)\fP. 
.TP
\fB/etc/init.d/fw\fR 
System service integration for \fBfw-admin\fP.
.nf
· By default at start it will do `fw-admin --start --nocheck`.
· At stop it will call `fw-admin --stop`.
· When checking the status, something like `fw-admin -s | grep "\\[fw up\\]"`
.fi
.TP
\fB/etc/default/fw\fR
Default configuration file for the init.d script. 
.TP
\fB/usr/sbin/fw-admin\fR 
\fBfw-admin\fP main binary/script.
.TP
\fB/usr/lib/fw-admin.d/\fR 
Standar dir for libs used by \fBfw-admin\fP.
.TP
\fB$DATA_DIR\fR 
Where datafiles are stored. Default is /var/lib/fw-admin

.SH DATAFILES
All variables are in \fBbash(1)\fP format.

The variables you use in rulefiles must be declared in both datafiles (v4 and v6),

You  may add variables by hand (not using \fBfw-admin -a\fP). In this case is strongly recommend to use \fBfw-admin --check-datafiles\fP when done.

This is a example format for the v4 datafile:

.RS
.TP
\fBVARS_IPV4="$DATA_DIR/datafile_v4.sh"\fP
.nf
VOID=255.255.255.255 ##ignore##
# comment
NIC1=eth0 ##ignore##
NIC2=eth1 ##ignore##
NETWORK=192.168.0.0/24 ##ignore##
R2D2=150.214.4.150 #r2d2.cica.es
C3PO=$VOID #c3po.cica.es
V192_168_2_2=192.168.2.2 #192.168.2.2
V2a00_9ac0_c1ca__1=$VOID #2a00:9ac0:c1ca::1
[...]
.fi
.RE

And for IPv6:
.RS
.TP
\fBVARS_IPV6="$DATA_DIR/datafile_v6.sh"\fP 
.nf
VOID=ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff ##ignore##
#comment
NIC1=eth0 ##ignore##
NIC2=eth1 ##ignore##
NETWORK=$VOID ##ignore##
R2D2=2a00:9ac0:c1ca:27::150 #r2d2.cica.es
C3PO=2a00:9ac0:c1ca:27::170 #c3po.cica.es
V192_168_2_2=$VOID #192.168.2.2
V2a00_9ac0_c1ca__1=2a00:9ac0:c1ca::1 #2a00:9ac0:c1ca::1
[...]
.fi
.RE

When a variable doesn't have a value in a datafile, set it to \fB$VOID\fP. Rules using a variable with \fB$VOID\fP value will be ignored.

The trailing comment is used to reload the values of FQDN variables (whe DNS records change).

.SH CONFIGURATION

See \fBfw-admin.conf(5)\fP.

.SH SEE ALSO
\fBfw-admin.conf(5)\fP, \fBiptables-save(8)\fP, \fBip6tables-save(8)\fP, \fBiptables(8)\fP, \fPip6tables(8)\fP, \fBipset(8)\fP

.SH ABOUT
The source code of \fBfw-admin\fP can be found in \fBhttps://github.com/aborrero/fw-admin\fP. There is also a wiki with more info, use cases, etc..

The author of \fBfw-admin\fP (and this man page) is \fBArturo Borrero Gonzalez <arturo.borrero.glez@gmail.com>\fP.

Thanks for testing and bug reporting: CICA staff and IES GN (Spain) students.
