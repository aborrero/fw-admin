#!/bin/bash

# Arturo Borrero <aborrero@cica.es>
#
# Copyright (c) 2012 Arturo Borrero
# This file is released under the GPLv3 license.
#
# Can obtain a complete copy of the license at: http://www.gnu.org/licenses/gpl-3.0.html
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#3

################################################################
################################################################
# Datafile functions

# boolean is_ipv4_valid(string ipv4)
# Check if an ipv4 is a valid ipv4
is_ipv4_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		egrep '^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$' <<< $1 > /dev/null
		if [ $? -eq 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_ipv6_valid(string ipv6)
# Check if an ipv6 is a valid ipv6
is_ipv6_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		egrep -E '^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$' <<< $1 > /dev/null
		if [ $? -eq 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_fqdn_valid(string fqdn)
# Check if an fqdn is a valid fqdn
is_fqdn_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		# resolve it to know if it's valid
		local resolution=`$DIG +short $1 2>/dev/null | wc -l 2>/dev/null`
		if [ ! -z "$resolution" ] && [[ $resolution =~ ^[0-9]+$ ]] && [ $resolution -ne 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_ip_fqdn_valid(string ip_or_fqdn)
# Check if an address is valid (ip or fqdn)
is_ip_fqdn_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		is_ipv6_valid $1 && retval=0
		is_ipv4_valid $1 && retval=0
		is_fqdn_valid $1 && retval=0
	fi
	return $retval
}

# boolean is_domain_fqdn(string fqdn)
# Funcion que valora si un fqdn es del dominio cica.es
is_domain_fqdn()
{
	local retval=1
	grep "$DOMAIN"$ <<< $1 > /dev/null
	if [ $? -eq 0 ]
	then
		retval=0
	fi
	return $retval
}



# boolean reload_variable_values()
# Esta funcion recorre todas las variables del sistema, reajustando su valor.
reload_variable_values()
{
	local reload_variable_values_retval=0
	echo -n "" > $AUX_FILE

	message "I: Variables containing the tag \"##ignore##\" are ignored."

	local lista_variables=`{ cat $VARS_IPV4 ; cat $VARS_IPV6 ; } | egrep -v "##ignorar##"\|"##ignore##"\|"@"\|^[[:space:]]*# \
		| awk -F'#' '{print $2}' | sort -u | uniq | grep -v ^[[:space:]]*$`

	# Evaluating if calcules regarding progress bar are neccesary
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local total=`wc -w <<< $lista_variables`
		local cont=0
	fi

	oldIFS=$IFS ; IFS=$' \t\n' #control over IFS
	for variable in $lista_variables
	do
		# Evaluating if calcules regarding progress bar are neccesary
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			((cont++))
			libprogressbar $cont $total
		fi
		# Solo se mostraran luego los mensajes de error
		add_ip_variable $variable >> $AUX_FILE 2>&1 || reload_variable_values_retval=1
	done
	IFS=$oldIFS

	local checklist=`grep "E:" $AUX_FILE`
	if [ ! -z "$checklist" ]
	then
		echo -e "$checklist"
	fi
	return $reload_variable_values_retval
}

# string get_variable_name(string data)
# Used to know what variable name correspond to the given data
get_variable_name()
{
	# Check for empty argument
	if [ -z "$1" ]
	then
		message "E: empty argument in function get_variable_name()"
		do_exit 1
	fi

	# Check if the data is IPv4
	if is_ipv4_valid $1
	then
		# return
		echo v$1 | tr '.' '_'
		return 0
	fi

	# Check if the data is IPv6
	if is_ipv6_valid $1
	then
		# return
		echo v$1 | tr ':' '_'
		return 0
	fi

	# Check if the data is FQDN
	if is_fqdn_valid $1
	then
		local name="$1"
		# if is from $DOMAIN, delete $DOMAIN
		is_domain_fqdn $1 && name=`echo $1 | awk -F".$DOMAIN" '{print $1}'`
		# if starts with a number, starts now with 'v'
		[[ $name =~ ^[0-9] ]] && name="v${name}"
		# and then return
		echo $name | tr [:lower:] [:upper:] | tr '.' '_' | tr '-' '_'
		return 0
	fi

	return 1
}

# ip get_ip_from_fqdn(string tipo_ip, string fqdn, int recursivityLevel)
# recursive function. Used to know the final IP asociated with an FQDN.
get_ip_from_fqdn()
{
        local tipo_ip=$1
        local fqdn=$2
	local recursivityLevel=$3

	[ -z "$tipo_ip" ] && { message "E: Function get_ip_from_fqdn() called with empty parameter (type)" ; do_exit 1 ; }
	[ -z "$fqdn" ] && { message "E: Function get_ip_from_fqdn() called with empty parameter (fqdn)" ; do_exit 1 ; }
	[ -z "$recursivityLevel" ] && recursivityLevel=0
	[ "$recursivityLevel" -gt 100 ] && { message "E: Max recursion level reached in function get_ip_from_fqdn()" ; do_exit 1 ; }
	((recursivityLevel++))

        local resolution=`$DIG +short $fqdn $tipo_ip`
        if is_ipv6_valid $resolution
        then
                echo "$resolution" # return point
        else
		if is_ipv4_valid $resolution
		then
			echo "$resolution" # return point
		else
			oldIFS=$IFS
			IFS=$' \t\n'
	                for linea in $resolution
	                do
	                        local resolution2="$resolution2 $(get_ip_from_fqdn $tipo_ip $linea $recursivityLevel)"
	                done
			IFS=$oldIFS
	                local resolution3=`echo "$resolution2" | tr [[:space:]] '\n' | grep -v ^[[:space:]]*$ | sort -u | uniq`
	                echo "$resolution3" # return point
		fi
        fi
	return 0
}


# boolean add_ip_variable(string data)
# Used to add a variale to IP datafiles
add_ip_variable()
{
	# trap de cancelacion
	trap " echo "" && message \"W: Interrupt...\" && do_exit 1 " SIGHUP SIGINT SIGTERM SIGKILL SIGTSTP SIGQUIT SIGCONT

	local add_ip_variable_retval=0
	local data_to_add=$1

	if [ -z "$data_to_add" ]
	then
		# No input data, use prompt
		read -p "-> Define IPv4, IPv6 or FQDN: " data_to_add
	fi

	#
	# Validations
	#
	{ is_ipv4_valid $data_to_add || is_ipv6_valid $data_to_add || is_fqdn_valid $data_to_add ; } \
		|| { message "E: Data is not a valid IP or FQDN: \"$data_to_add\"" ; add_ip_variable_retval=1 ; }


	# Continue only if parameter was validated
	if [ $add_ip_variable_retval -eq 0 ]
	then

		#
		# Calculate the name of the variable
		#
		variable_name=$( get_variable_name $data_to_add )
		[ $? -ne 0 ] && { message "E: Unable to determine the variable name" ; do_exit 1 ; }

		echo "DEBUG: $variable_name=$data_to_add #$data_to_add" > /dev/null

		if grep ^"${variable_name}=" $VARS_IPV4 > /dev/null 2> /dev/null && grep ^"${variable_name}=" $VARS_IPV6 > /dev/null 2> /dev/null
		then
			# The variable is already stored.
			message "W: Refreshing variable data: ${variable_name}"
		else
			message "I: The variable name is: ${variable_name}"
		fi

		#
		# Write to datafiles
		#
		store_in_ipdatafile "ipv4" "$variable_name" "$data_to_add" \
			|| { message "E: Unable to store $data_to_add in file ${VARS_IPV4}" ; do_exit 1 ; }
		store_in_ipdatafile "ipv6" "$variable_name" "$data_to_add" \
			|| { message "E: Unable to store $data_to_add in file ${VARS_IPV6}" ; do_exit 1 ; }

		#
		# Check if all went fine
		#
		grep ^"${variable_name}=" $VARS_IPV4 > /dev/null 2> /dev/null || add_ip_variable_retval=1
		grep ^"${variable_name}=" $VARS_IPV6 > /dev/null 2> /dev/null || add_ip_variable_retval=1

		[ $add_ip_variable_retval -ne 0 ] &&  message "W: There is an error when storing in datafiles the variable ${variable_name}"
	fi
	return $add_ip_variable_retval

}

# boolean add_set_variable(string data_to_add)
# To add a set variable to datafiles
add_set_variable()
{
	local agregar_set_retval=0
	local data_to_add=$1

	if [ -z "$data_to_add" ]
	then
		# No input data, use a prompt
		read -p "-> Define set name: " data_to_add
	fi

	# Validation
	data_to_add=`tr [:lower:] [:upper:] <<< $data_to_add`
	# Must not exist
	( grep -i "${data_to_add}_ipv4" $VARS_IPSETV4 > /dev/null && grep -i "${data_to_add}_ipv6" $VARS_IPSETV6 > /dev/null ) \
		&& { message "W: The variable already exist." ; agregar_set_retval=1 ; }

	# Continue only if parameter was validated.
	if [ $agregar_set_retval -eq 0 ]
	then
		#
		# Write to datafiles
		#
		echo "$data_to_add=`tr [:upper:] [:lower:] <<< $data_to_add`_ipv4" >> $VARS_IPSETV4 \
				|| { message "E: Unable to write $VARS_IPSETV4" ; agregar_set_retval=1 ; }
		echo "$data_to_add=`tr [:upper:] [:lower:] <<< $data_to_add`_ipv6" >> $VARS_IPSETV6 \
				|| { message "E: Unable to write $VARS_IPSETV6" ; agregar_set_retval=1 ; }

		# Not very usefull
		#echo "The stored data: "
		#grep ^"${data_to_add}=" $VARS_IPSETV4 2>/dev/null
		#grep ^"${data_to_add}=" $VARS_IPSETV6 2>/dev/null
	fi

	return $agregar_set_retval
}


# boolean store_in_ipdatafile(string protocol, string variable_name, string data_to_add)
# Store in the datafile a variable.
# protocol: {ipv4|ipv6}
store_in_ipdatafile()
{
	local store_in_ipdatafile_retval=0
	local protocol=$1
	local variable_name=$2
	local data_to_add=$3

	if [ -z "$variable_name" ]
	then
		store_in_ipdatafile_retval=1
	fi
	if [ -z "$data_to_add" ]
	then
		store_in_ipdatafile_retval=1
	fi

	case "$protocol" in
		"ipv4")
			local working_file=$VARS_IPV4
			;;
		"ipv6")
			local working_file=$VARS_IPV6
			;;
		*)
			store_in_ipdatafile_retval=1
			;;
	esac

	# EXIT POINT
	if [ $store_in_ipdatafile_retval -ne 0 ]
	then
		message "E: Bad call to function store_in_ipdatafile() Invalid input arguments"
		do_exit 1
	fi

	# Cleaning previous data
	if grep ^"${variable_name}=" $working_file > /dev/null
	then
		local data=`grep -v ^"${variable_name}=" $working_file | grep -v ^[[:space:]]*$`
		echo "$data" > $working_file
		if [ $? -ne 0 ]
		then
			message "E: When cleaning the previous data. Dataloss is expected"
			do_exit 1
		fi
	fi

	[ $store_in_ipdatafile_retval -ne 0 ] && return $store_in_ipdatafile_retval # Return point


	# How to store data if we are working with a FQDN
	if is_fqdn_valid $data_to_add
	then
		case "$protocol" in
			"ipv4" )
				# get the A
				local resolution="$(get_ip_from_fqdn A $data_to_add 0)"
				;;
			"ipv6" )
				# get the AAAA
				local resolution="$(get_ip_from_fqdn AAAA $data_to_add 0)"
				;;
		esac

		if [ -z "$resolution" ]
		then
			# No resolution for this FQDN
			echo "${variable_name}=\$VOID #$data_to_add" >> $working_file
			if [ $? -ne 0 ]
			then
				message "E: Unable to store data [${data_to_add}] (void) to [$working_file]. Possible dataloss"
				do_exit 1
			fi
		else
			# There is resolution for this FQDN
			if [ `echo "$resolution" | wc -l` -gt 1 ]
			then
				# Complex resolution.
				echo "${variable_name}=${data_to_add} #$data_to_add" >> $working_file
				if [ $? -ne 0 ]
				then
					message "E: Unable to store data [${data_to_add}] (complex) to [$working_file]. Possible dataloss."
					do_exit 1
				fi
			else
				# Standar resolution
				echo "${variable_name}=$resolution #$data_to_add" >> $working_file
				if [ $? -ne 0 ]
				then
					message "E: Unable to store data [${data_to_add}] (standar) to [$working_file]. Possible dataloss."
					do_exit 1
				fi
			fi
		fi
	else # Plain IP (v4 or v6)
		# How to store data if we are working with an IPv6
		if is_ipv6_valid $data_to_add
		then
			case "$protocol" in
				"ipv4" )
					echo "${variable_name}=\$VOID #$data_to_add" >> $working_file
					if [ $? -ne 0 ]
					then
						message "E: Unable to store data [${data_to_add}] (void) to [$working_file]. Possible dataloss."
						do_exit 1
					fi
					;;
				"ipv6" )
					echo "${variable_name}=${data_to_add} #$data_to_add" >> $working_file
					if [ $? -ne 0 ]
					then
						message "E: Unable to store data [${data_to_add}] (void) to [$working_file]. Possible dataloss."
						do_exit 1
					fi
					;;
			esac
		else
			# How to store data if we are working with an IPv4
			if is_ipv4_valid $data_to_add
			then
				case "$protocol" in
					"ipv4" )
						echo "${variable_name}=${data_to_add} #$data_to_add" >> $working_file
						if [ $? -ne 0 ]
						then
							message "E: Unable to store data [${data_to_add}] (standar) to [$working_file]. Possible dataloss."
							do_exit 1
						fi
						;;
					"ipv6" )
						echo "${variable_name}=\$VOID #$data_to_add" >> $working_file
						if [ $? -ne 0 ]
						then
							message "E: Unable to store data [${data_to_add}] (standar) to [$working_file]. Possible dataloss."
							do_exit 1
						fi
						;;
				esac
			else
				message "E: Bad call to function store_in_ipdatafile(). Invalid data."
				store_in_ipdatafile_retval=1
			fi
		fi
	fi
	return $store_in_ipdatafile_retval
}

# boolean delete_data(string data_to_delete)
# Validate the given data and delete it from datafiles
delete_data()
{
	local delete_data_retval=0
	local data_to_delete=$1
	local flag_something_deleted=0
	echo -n "" > $AUX_FILE

	# We don't know if data_to_delete is a variable of IPSET or IP/FQDN
	# Try now to resolve to a VAR name
	get_input_abstracted_of_type $data_to_delete $AUX_FILE

	# AUX_FILE now contains a repeated and unordered list of matches (or not)
	if [ $( cat $AUX_FILE | wc -l) -gt 0 ]
	then
		# Yes, is filled with lines like this:
		#/path/to/datafile: VAR=data #comment

		# Iterate over the list of vars
		for var in $( awk -F'=' '{print $1}' $AUX_FILE | awk -F' ' '{print $2}' | sort | uniq )
		do
			read -p "-> Delete the IP/FQDN variable \"${var}\"? [y/N]: "
			if [ "$REPLY" == "y" ] # REPLY is a special variable by read
			then
				delete_from_datafile $var $VARS_IPV4 \
					|| { message "W: Something went wrong when deleting ${var} from $VARS_IPV4" ; delete_data_retval=1 ; break ; }
				delete_from_datafile $var $VARS_IPV6 \
					|| { message "W: Something went wrong when deleting ${var} from $VARS_IPV6" ; delete_data_retval=1 ; break ; }
				message "W: Deleted IP/FQDN variable \"${var}\""
				flag_something_deleted=1
			fi
		done
	fi

	# IP/FQDN variables were not found. Maybe we are triying to delete a IPSET variable?
	if egrep ^[[:space:]]*${data_to_delete}= $VARS_IPSETV4 > /dev/null &&  egrep ^[[:space:]]*${data_to_delete}= $VARS_IPSETV6 > /dev/null
	then
		# We found data to delete in IPSET datafiles!!
		read -p "-> Delete the ipset variable \"${data_to_delete}\"? [y/N]: "
		if [ "$REPLY" == "y" ] # REPLY is a special variable by read
		then
			delete_from_datafile $data_to_delete $VARS_IPSETV4 \
				|| { message "W: Something went wrong when deleting ${data_to_delete} from $VARS_IPSETV4" ; delete_data_retval=1 ; }
			delete_from_datafile $data_to_delete $VARS_IPSETV6 \
				|| { message "W: Something went wrong when deleting ${data_to_delete} from $VARS_IPSETV6" ; delete_data_retval=1 ; }
			message "W: Deleted ipset variable \"${data_to_delete}\""
			flag_something_deleted=1
		fi
	fi

	if [ $flag_something_deleted -eq 0 ]
	then
		# Warning, nothing to do
		message "W: No data found to delete"
		delete_data_retval=1
	else
		# Force a check-datafiles
		echo ""
		message "I: Automatically checking datafiles because of the delete"
		check_datafiles || delete_data_retval=$?
	fi

	return $delete_data_retval
}

# boolean delete_from_datafile(string variable_name, string datafile)
# Delete the variable_name from the given datafile
delete_from_datafile()
{
	local delete_from_dafatile_retval=1

	local variable_name=$1
	local datafile=$2
	local hash=""

	cp $datafile ${datafile}~ || { message "E: Unable to copy the datafile $datafile to operate" ; do_exit 1 ; }
	local tmpfile=$( grep -v ^${variable_name}= ${datafile}~ 2>/dev/null )

	hash=$( sha512sum <<< "$tmpfile" )
	echo "$tmpfile" > ${datafile}~

	if [ "$hash" == "$( sha512sum < ${datafile}~ )" ]
	then
		mv ${datafile}~ $datafile 2>/dev/null || { message "E: Unable to copy back $datafile" ; do_exit 1 ; }
		delete_from_datafile_retval=0
	else
		message "E: Unable to operate. Bad integrity $datafile"
		do_exit 1
	fi

	return $delete_from_datafile_retval
}

