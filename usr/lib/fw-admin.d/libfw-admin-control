#!/bin/bash

# Arturo Borrero <aborrero@cica.es>
#
# Copyright (c) 2012 Arturo Borrero
# This file is released under the GPLv3 license.
#
# Can obtain a complete copy of the license at: http://www.gnu.org/licenses/gpl-3.0.html
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#2

################################################################
################################################################
# Control functions

# void message(string message)
# Show a message to stdout and/or stderr. Maybe also to logger
message()
{
	# $1 is the raw message

	local message=${*}

	# colour if configured
	if [ "$USE_COLORS" == "yes" ]
	then
		message=${message/"E: "/"${C_RED}E:${C_NORMAL} "}
		message=${message/"W: "/"${C_YELLOW}W:${C_NORMAL} "}
		message=${message/"I: "/"${C_GREENBOLD}I:${C_NORMAL} "}
	fi

	# what to do with the message
	if [[ $1 =~ ^"E:" ]]
	then
		echo -e "$message" >&2
		[ "$LOG_ERROR_MESSAGES" == "yes" ] && $LOGGER_BIN $ARGS_LOGGER $1
		return 0
	fi
	if [[ $1 =~ ^"W:" ]]
	then
		echo -e "$message" >&2
		[ "$LOG_WARN_MESSAGES" == "yes" ] && $LOGGER_BIN $ARGS_LOGGER $1
		return 0
	fi

	# If not returned yet, the message wasn't E: or W:, so print it to stdout
	echo -e "$message"

	return 0
}

# void do_exit(int exit_code)
# Exit the program, flushing PID_FILE and AUX_FILE
do_exit()
{
	if [ -r "$PID_FILE" ]
	then
		if [ "`cat $PID_FILE`" == "${$}" ] 2> /dev/null # Borramos el lock file solo si es nuestro
		then
			rm -f $PID_FILE 2> /dev/null
		fi
	fi
	if [ -e "$AUX_FILE" ]
	then
		rm -f $AUX_FILE 2> /dev/null
	fi
	exit $1
}

# boolean validate_execution()
# Check if there are other instance in critical mode
validate_execution()
{
	# If PID_FILE doesn't exist
	# the execution is our's, so put pid to PID_FILE
	if [ ! -r $PID_FILE ]
	then
		echo "${$}" > $PID_FILE 2> /dev/null
	fi

	local pid=`cat $PID_FILE`
	if [ "$pid" != "${$}" ] 2> /dev/null
	then
		message "E: PID_FILE already exist with pid ${pid} $PID_FILE"
		do_exit 1
	fi
	return 0
}


# boolean check_root()
# Check if this is a root execution.
check_root()
{
	local check_root_retval=0
	if [ `id -u` -ne 0 ]
	then
		check_root_retval=1
	fi
	return $check_root_retval
}

# boolean check_files()
# Check for all required files and bins.
check_files()
{
	local check_files_retval=0
	[ -x $IPT_SAVE ] || { message "E: Binary not found [$IPT_SAVE]" ; check_files_retval=1 ; }
	[ -x $IP6T_SAVE ] || { message "E: Binary not found [$IP6T_SAVE]" ; check_files_retval=1 ; }
	[ -x $IPT_RESTORE ] || { message "E: Binary not found [$IPT_RESTORE]" ; check_files_retval=1 ; }
	[ -x $IP6T_RESTORE ] || { message "E: Binary not found [$IP6T_RESTORE]" ; check_files_retval=1 ; }
	[ -w $AUX_FILE ] || { message "E: Unable to create aux file [$AUX_FILE]" ; check_files_retval=1 ; }
	[ -d $CONF_DIR ] || { message "E: Dir not found [$CONF_DIR]" ; check_files_retval=1 ; }
	[ -x $IPSET_CONF ] || { message "E: File not found [$IPSET_CONF]" ; check_files_retval=1 ; }
	[ -d $DATA_DIR ] || { message "E: Dir not found [$DATA_DIR]" ; check_files_retval=1 ; }
	[ -w $VARS_IPV6 ] || { message "E: File not found [$VARS_IPV6]" ; check_files_retval=1 ; }
	[ -w $VARS_IPV4 ] || { message "E: File not found [$VARS_IPV4]" ; check_files_retval=1 ; }
	[ -w $VARS_IPSETV6 ] || { message "E: File not found [$VARS_IPSETV6]" ; check_files_retval=1 ; }
	[ -w $VARS_IPSETV4 ] || { message "E: File not found [$VARS_IPSETV4]" ; check_files_retval=1 ; }
	[ -x $IPT ] || { message "E: Binary not found [$IPT]." ; check_files_retval=1 ; }
	[ -x $IP6T ] || { message "E: Binary not found [$IP6T]." ; check_files_retval=1 ; }
	[ -x $IPSET ] || { message "E: Binary not found [$IPSET]." ; check_files_retval=1 ; }
	[ -x $DIG ] || { message "E: Binary not found [$DIG]" ; check_files_retval=1 ; }

	return $check_files_retval
}

# string get_absolute_path(string filename)
# Obtain the absolute pathname to a given filename, first looking into $CONF_DIR
get_absolute_path()
{
	local filename=$1
	local get_absolute_path_retval=1

	# Here we have 2 options.
	#	1. The argument is a file in $CONF_DIR, so we return the absolute pathname as we know it.
	#	2. The argument already is an absolute pathname, so return it.

	# Check just for read permission. Don't need execution.

	if [ -r "$CONF_DIR/$filename" ]
	then
		get_absolute_path_retval=0
		echo "$CONF_DIR/$filename" # the string return
	else
		if [ -r "$filename" ]
		then
			get_absolute_path_retval=0
			echo "$filename" # the string return
		fi
	fi
	return $get_absolute_path_retval
}

# string libprogressbar(int i, int max)
# Forked from http://www.brianhare.com/wordpress/2011/03/02/bash-progress-bar/
# Use this for easily test
# $ max=1000
# $ for i in `seq 1 $max`; do libprogressbar $i $max ; done
libprogressbar()
{

	# This needs strong optimization.

        local current=0
        local max=100
        local decimal=1
        local max_width=50
        local subtraction width atleast percent chars
        local padding=5

	current=${1:-$current}
	max=${2:-$max}

	# Delete the bar now
	if [ $max -eq $current ]
	then
		printf '%s\r' "                                                             "
		return 0
	fi

        let subtraction=${#completed_char}+${#prefix}+${#suffix}+padding+${#percent_sign}
        let width=max_width-subtraction

	if (( current > max ))
	then
		echo >&2 "libprogressbar: current value must be smaller than max. value"
		return 1
	fi

	percent=$(awk -v "f=%5.1f" -v "c=$current" -v "m=$max" 'BEGIN{printf('f', c / m * 100)}')
	(( chars = current * width / max))

	# sprintf n zeros into the var named as the arg to -v
	printf -v complete '%0*.*d' '' "$chars" ''
	printf -v remain '%0*.*d' '' "$((width - chars))" ''

	# replace the zeros with the desired char
	#complete=${complete//0/"#"} #completed char
	#remain=${remain//0/"."} #uncompleted char

	printf ' %s%s%s%s %s%s\r' "[" "${complete//0/-}" "${remain//0/ }" "]" "$percent" "%"

	if (( current >= max ))
	then
		echo ""
	fi
	return 0
}
