#!/bin/bash

# Arturo Borrero <aborrero@cica.es>
#
# Copyright (c) 2012 Arturo Borrero
# This file is released under the GPLv3 license.
#
# Can obtain a complete copy of the license at: http://www.gnu.org/licenses/gpl-3.0.html
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#5

# boolean check_iptables_syntax_loop(string file_being_checked, int protocol)
# Loop over a file checking iptables syntax. Protocol: 4|6
check_iptables_syntax_loop()
{

	local check_iptables_syntax_loop_retval=0
	echo -n "" > $AUX_FILE

	# Validations
	[ ! -r "$1" ] && { message "E: Function check_iptables_syntax_loop() called with an unreadable filename as argument." ; do_exit 1 ;}
	[ "$2" != "4" ] && [ "$2" != "6" ] && { message "E: Function check_iptables_syntax_loop() called with bad protocol as argument." ; do_exit 1 ; }

	# Using a more legible name
	local file_being_checked=$1
	local protocol=$2

	# Store all lines in a variable, to avoid double disk read in: calculating the amount of lines and iterate over they.
	local list_of_lines=`cat $file_being_checked | nl -b a | egrep -v ^[[:space:]]*[0-9]*[[:space:]]*"#"\|^[[:space:]]*[0-9]*[[:space:]]$\|"IPSET" | egrep "IPT -A "\|"IPT -I "`

	# Evaluating if we need calcules regarding progress bar
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local amount_of_lines=`wc -l <<< "$list_of_lines"`
		local cont=0
	fi

	for line in $list_of_lines
	do
		# Evaluating if we need calcules regarding progress bar
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			((cont++))
			libprogressbar $cont $amount_of_lines
		fi

		# Preparing the line to be evaluated.

		# 1ยบ Delete the number of the line
		local ejec=`awk -F' ' '{$1=""}1' <<< ${line}`
		# 2ยบ Change -I to -C
		ejec=${ejec/"IPT -I "/"IPT -C "}
		# 3ยบ Change -A to -C
		ejec=${ejec/"IPT -A "/"IPT -C "}

		# Evaluating now
		error_msg=$( eval "${ejec} 2>&1" 2>&1 ) # error_msg must be a global variable for this trick to work
		if [ $? -eq 2 ]
		then
			message "W: The rule in line \"`awk -F' ' '{print $1}' <<< $line`\" failed the check in IPv${protocol}." >> $AUX_FILE 2>&1
			echo "Details:" >> $AUX_FILE
			awk -F' ' '{$1=""}1' <<< ${line} >> $AUX_FILE
			# add a space to improve reading by the admin
			for error_line in $error_msg
			do
				echo " $error_line" >> $AUX_FILE
			done
			check_iptables_syntax_loop_retval=1
		fi
	done

	grep -v ^[[:space:]]*$ $AUX_FILE >&2

	return $check_iptables_syntax_loop_retval
}

# boolean check_iptables_syntax(string filename)
# Source datafiles and launch loop over rules in a given file
check_iptables_syntax()
{
	# Doing nothing if format restore
	[ "$FORMAT" == "restore" ] && return 0

	local check_iptables_syntax_retval=0
	local filename=$1

	# Doing nothing if is the $IPSET_CONF file or if it is the core file.
	if [[ "$filename" =~ ^"core"$ ]] || [[ "$filename" =~ /"core"$ ]] || [ "$filename" == "$IPSET_CONF" ]
	then
		return 0
	fi

	# EXIT POINT
	if [ ! -r "$filename" ]
	then
		message "E: Bad call to function check_iptables_syntax()"
		do_exit 1
	fi

	# Clean the aux file
	echo "" > $AUX_FILE

	# If using progress bar, print a message so user know what means.
	[ "$USE_PROGRESS_BAR" == "yes" ] && message "I: Checking iptables syntax $filename"

	oldIFS=$IFS ; IFS=$'\n' # Control over IFS
	source $VARS_IPV4 && source $VARS_IPSETV4 && { IPT=$IPT_LOCAL ; IPSET=$IPSET_LOCAL ; } \
	|| { message "E: Unable to load datafiles in IPv4." ; do_exit 1 ; } # EXIT POINT

	check_iptables_syntax_loop $filename 4 || check_iptables_syntax_retval=1

	# Aboid IPv6 checks if NAT
	if [[ $filename =~ "nat"$ ]]
	then
		: "DEBUG: No IPv6 syntax check because NAT."
	else
		message "I: Checking ip6tables syntax $filename"
		source $VARS_IPV6 && source $VARS_IPSETV6 && { IPT=$IP6T_LOCAL ; IPSET=$IPSET_LOCAL ; } \
		|| { message "E: Unable to load datafiles in IPv6." ; do_exit 1 ; } # EXIT POINT

		check_iptables_syntax_loop $filename 6 || check_iptables_syntax_retval=1
	fi
	IFS=$oldIFS
	return $check_iptables_syntax_retval
}

# boolean check_rulefile(string file_to_check)
# To check that variables of a rulefile are in datafiles and ip[6]?tables syntax
check_rulefile()
{
	[ ! -z "$flag_no_check" ] && [ $flag_no_check -eq 1 ] && return 0

	local check_rulefile_retval=0
	local flag_wrong_variables=0
	local flag_wrong_iptables=0

	local file_to_check=$( get_absolute_path $1 )
	if [ "$file_to_check" == "" ]
	then
		message "E: File not found $1"
		do_exit 1
	fi

	# Clear aux file
	echo "" > $AUX_FILE


	# If we are using progress bar, print a message so user know what means the progress bar
	[ "$USE_PROGRESS_BAR" == "yes" ] && message "I: Checking variables $file_to_check"

	oldIFS=$IFS ; IFS=$' \t\n' # control over IFS
	# Do we need to do calcules related to progress bar?
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local amount=`grep -v ^[[:space:]]*# $file_to_check | tr [[:space:]] '\n' | fgrep \$ | egrep -v "IPT"$\|"IPSET"$\|^[[:space:]]*$ | sort -u | wc -l`
		local cont=0
	fi

	# Iterate over variables ($FOO) on file
	for word in `grep -v ^[[:space:]]*# $file_to_check | tr [[:space:]] '\n' | fgrep \$ | egrep -v "IPT"$\|"IPSET"$\|^[[:space:]]*$ | sort -u`
	do
		# Do we need to do calcules related to progress bar?
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
	                ((cont++))
	       	        libprogressbar $cont $amount
		fi
		# If the word is IPT|IPSET|iptables|ip6tables, do nothing and continue
		{ [[ "$word" =~ "IPT" ]] || [[ "$word" =~ "IPSET" ]] || [[ "$word" =~ "ip"[6]?"tables" ]] ; } && continue
		# If not, look for the word in datafiles
		local search=`echo $word | tr -d '$'`

		# the search. Must be in both datafiles of the same type to consider the variable valid.
		if ! { grep ^[[:space:]]*"$search"=.*$ $VARS_IPV4 > /dev/null && grep ^[[:space:]]*"$search"=.*$ $VARS_IPV6 > /dev/null ; }
		then
			if ! { grep ^[[:space:]]*"$search"=.*$ $VARS_IPSETV4 > /dev/null && grep ^[[:space:]]*"$search"=.*$ $VARS_IPSETV6 > /dev/null ; }
			then
				echo "W: Unknow variable \$${search} $file_to_check" >> $AUX_FILE
				flag_wrong_variables=1
			fi
		fi
	done
	IFS=$oldIFS

	# Showing warnings now
	oldIFS=$IFS ; IFS=$'\n'
	for line in $( cat $AUX_FILE )
	do
		message "$line"
	done
	IFS=$oldIFS

	[ $flag_wrong_variables -ne 0 ] && return 1 # return point

	# Check iptables syntax if all variables all fine
	check_iptables_syntax $file_to_check || flag_wrong_iptables=$?
	[ "$flag_wrong_variables" -ne 0 ] || [ "$flag_wrong_iptables" -ne 0 ] && check_rulefile_retval=1

	return $check_rulefile_retval
}

# boolean check_chain_exist(string chainname)
# Check if a chain exists in iptables/6tables
check_chain_exist()
{
	local check_chain_exist_retval=1

	# validating
	[ -z "$1" ] && return 1

	# core, sets, nat doesn't require chain
	[[ $1 =~ ^"core"$|^"sets"$|^"nat"$ ]] && return 0

	if $IPT_SAVE | grep ^: | grep $1 >/dev/null 2>/dev/null
	then
		if $IP6T_SAVE | grep ^: | grep $1 >/dev/null 2>/dev/null
		then
			check_chain_exist_retval=0
		fi
	fi

	return $check_chain_exist_retval
}
